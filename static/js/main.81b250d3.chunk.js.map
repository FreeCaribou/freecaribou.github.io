{"version":3,"sources":["logo.svg","hooks/useLanguageContext.js","pages/CareerPage.js","pages/HomePage.js","pages/ProjectPage.js","pages/MainPage.js","App.js","serviceWorker.js","i18n/i18n.js","index.js"],"names":["module","exports","LanguageContext","createContext","language","CareerPage","HomePage","useTranslation","t","i18n","useContext","setCurrentLanguage","Button","primary","onClick","e","secondary","ProjectPage","MainPage","languageChange","d","console","log","value","Menu","color","inverted","fixed","Container","Item","to","position","Dropdown","placeholder","floating","text","image","avatar","src","style","marginTop","exact","path","App","useState","currentLanguage","acceptedLanguage","useEffect","localLng","localStorage","getItem","userLang","navigator","slice","changeLanguage","lng","find","x","setItem","Provider","Boolean","window","location","hostname","match","use","Backend","initReactI18next","init","fallbackLng","interpolation","escapeValue","ReactDOM","render","fallback","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.81b250d3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { createContext, SetStateAction, Dispatch } from \"react\";\r\n\r\nconst LanguageContext = createContext([\r\n  null,\r\n  language => language\r\n]);\r\n\r\nexport default LanguageContext;\r\n","import React from \"react\";\r\n\r\nexport default function CareerPage() {\r\n  return (\r\n    <div>\r\n\r\n      <h1>Hello Career</h1>\r\n\r\n    </div>\r\n  );\r\n}","import React, { useContext } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Button } from \"semantic-ui-react\";\r\nimport LanguageContext from \"../hooks/useLanguageContext\";\r\n\r\nexport default function HomePage() {\r\n\r\n  const { t, i18n } = useTranslation();\r\n\r\n  const [currentLanguage, setCurrentLanguage] = useContext(LanguageContext);\r\n\r\n  return (\r\n    <div>\r\n\r\n      <h1>{t('General.Hello')}</h1>\r\n      <Button primary onClick={e => setCurrentLanguage('en')} >En</Button>\r\n      <Button secondary onClick={e => setCurrentLanguage('fr')}>Fr</Button>\r\n\r\n    </div>\r\n  );\r\n}","import React from \"react\";\r\n\r\nexport default function ProjectPage() {\r\n  return (\r\n    <div>\r\n\r\n      <h1>Hello Project</h1>\r\n\r\n    </div>\r\n  );\r\n}","import React, { useContext } from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport {\r\n  HashRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport { Container, Dropdown, Flag, Menu } from \"semantic-ui-react\";\r\nimport LanguageContext from \"../hooks/useLanguageContext\";\r\nimport CareerPage from \"./CareerPage\";\r\nimport HomePage from \"./HomePage\";\r\nimport ProjectPage from \"./ProjectPage\";\r\n\r\nexport default function MainPage() {\r\n\r\n  const { t, i18n } = useTranslation();\r\n  const [currentLanguage, setCurrentLanguage] = useContext(LanguageContext);\r\n\r\n  const languages = [\r\n    {\r\n      key: 'en',\r\n      value: 'en',\r\n      text: 'English',\r\n      image: { avatar: true, src: '/flag/en.png' }\r\n    },\r\n    {\r\n      key: 'fr',\r\n      value: 'fr',\r\n      text: 'French',\r\n      image: { avatar: true, src: '/flag/fr.png' }\r\n    },\r\n    {\r\n      key: 'no',\r\n      value: 'no',\r\n      text: 'Norsk',\r\n      image: { avatar: true, src: '/flag/no.png' }\r\n    },\r\n  ]\r\n\r\n  const languageChange = (e, d) => {\r\n    console.log(e, d);\r\n    setCurrentLanguage(d.value);\r\n  }\r\n\r\n  return (\r\n    <Router>\r\n      <div>\r\n\r\n        <Menu color={'blue'} inverted fixed='top'>\r\n          <Container>\r\n\r\n            <Menu.Item color={'orange'}>\r\n              <Link to=\"/\">Home</Link>\r\n            </Menu.Item>\r\n            <Menu.Item color={'orange'}>\r\n              <Link to=\"/project\">Project</Link>\r\n            </Menu.Item>\r\n            <Menu.Item color={'orange'}>\r\n              <Link to=\"/career\">Career</Link>\r\n            </Menu.Item>\r\n\r\n            <Menu.Item position='right'>\r\n              <Dropdown placeholder={t('General.Language')} floating>\r\n                <Dropdown.Menu>\r\n                  <Dropdown.Item onClick={(e, d) => languageChange(e, d)} value=\"en\" text=\"English\" image={{ avatar: true, src: '/flag/en.png' }} />\r\n                  <Dropdown.Item onClick={(e, d) => languageChange(e, d)} value=\"fr\" text=\"FranÃ§ais\" image={{ avatar: true, src: '/flag/fr.png' }} />\r\n                  <Dropdown.Item onClick={(e, d) => languageChange(e, d)} value=\"no\" text=\"Norsk\" image={{ avatar: true, src: '/flag/no.png' }} />\r\n                </Dropdown.Menu>\r\n              </Dropdown>\r\n            </Menu.Item>\r\n\r\n          </Container>\r\n        </Menu>\r\n\r\n        <Container style={{ marginTop: '7em' }}>\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <HomePage />\r\n            </Route>\r\n            <Route path=\"/project\">\r\n              <ProjectPage />\r\n            </Route>\r\n            <Route path=\"/career\">\r\n              <CareerPage />\r\n            </Route>\r\n          </Switch>\r\n        </Container>\r\n\r\n      </div>\r\n    </Router>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MainPage from './pages/MainPage';\nimport { useTranslation } from 'react-i18next';\nimport LanguageContext from './hooks/useLanguageContext';\n\nfunction App() {\n\n  const { t, i18n } = useTranslation();\n\n  const [currentLanguage, setCurrentLanguage] = useState('en');\n\n  const [acceptedLanguage] = useState(['en', 'fr']);\n\n  useEffect(() => {\n    console.log('Welcome in the consol, what are you doing here?')\n    const localLng = localStorage.getItem('lng');\n    if (localLng) {\n      setCurrentLanguage(localLng);\n    } else {\n      let userLang = navigator.language;\n      userLang = userLang.slice(0, 2);\n      setCurrentLanguage(userLang);\n    }\n  }, []);\n\n  useEffect(() => {\n    changeLanguage(currentLanguage);\n  }, [currentLanguage]);\n\n  const changeLanguage = (lng) => {\n    if (acceptedLanguage.find(x => x === lng)) {\n      console.log('change the lang!');\n      i18n.changeLanguage(lng);\n      localStorage.setItem('lng', currentLanguage);\n    }\n  }\n\n  return (\n    <LanguageContext.Provider value={[currentLanguage, setCurrentLanguage]}>\n      <MainPage />\n    </LanguageContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import i18n from \"i18next\";\r\nimport { initReactI18next } from \"react-i18next\";\r\nimport Backend from 'i18next-http-backend';\r\n\r\ni18n\r\n  .use(Backend)\r\n  .use(initReactI18next) // passes i18n down to react-i18next\r\n  .init({\r\n    fallbackLng: 'en',\r\n    lng: 'en',\r\n\r\n    interpolation: {\r\n      escapeValue: false // react already safes from xss\r\n    }\r\n  });\r\n\r\nexport default i18n;","import React, { Suspense } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// import 'semantic-ui-css/semantic.min.css';\nimport 'semantic-ui-less/semantic.less';\n\nimport './i18n/i18n';\n\nReactDOM.render(\n  <Suspense fallback={<p>Load</p>}>\n    <App />\n  </Suspense>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}